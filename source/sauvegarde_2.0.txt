//############################################################################

Coordonnee get_trajectoire_coordonnee(Pilote *pilote, Trajectoire *trajectoire, FILE *inf) {

	Trajectoire *actuel = NULL, *actuel_2 = NULL;
	actuel = trajectoire->suivant;
	actuel_2 = trajectoire;
	Coordonnee output;
	int tmp_distance_1=1000,tmp_distance_2;

	//Recherche parmi la liste des coordonnées à suivre la plus proche du joueur
	while(actuel != NULL)
	{
		tmp_distance_2 = distance(actuel->coordonnees, pilote->coordonnee_map);

		//On teste si la distance trouvée et inférieure à la precedente 
		//et que le joueur ne se trouve pas sur la coordonnée observée
		if(tmp_distance_2 <= tmp_distance_1 && tmp_distance_2 != 0)
		{
			tmp_distance_1 = tmp_distance_2;
			actuel_2 = actuel;
	
		}

		actuel = actuel->suivant;
	}

	if(actuel_2 == NULL) {
		fprintf(inf, "DANS LA MERDE T_T\n" );
		exit(0);
	}
	//On teste si avec la vitesse du joueur actuel, le pilote peut aller à la coordonnée renvoyée
	if(pilote->carte.matrice[actuel_2->coordonnees.x + pilote->coordonnee_vitesse.x][actuel_2->coordonnees.y + pilote->coordonnee_vitesse.y] == '#') {

		output.x = actuel_2->coordonnees.x;
		output.y = actuel_2->coordonnees.y;

		fprintf(inf, "[1] coordonnee traj : %d %d ||\n", actuel_2->coordonnees.x,actuel_2->coordonnees.y);

		return output;
	}
	else {
		//Sinon, on renvoie la coordonnée precedente
		output.x = actuel_2->precedent->coordonnees.x;
		output.y = actuel_2->precedent->coordonnees.y;

		fprintf(inf, "[2] coordonnee traj : %d %d ||\n", actuel_2->coordonnees.x,actuel_2->coordonnees.y);

		return output;
	}
}

//############################################################################

void rouler_pilote(Pilote *pilote, Coordonnee coordonnee, FILE *inf) {

	int tmp_vitesse_X, tmp_vitesse_Y,tmp_acc_X,tmp_acc_Y;
	int i,j;

	//Coordonnées du vecteur vitesse pour aller à la coordonnée donnée en paramètre
	tmp_vitesse_X = coordonnee.x - pilote->coordonnee_map.x;	
	tmp_vitesse_Y = coordonnee.y - pilote->coordonnee_map.y;

	//Ré-initialisation des vecteurs accélérations
	tmp_acc_X = tmp_acc_Y = 0;

	//On normalise le vecteur accélération intermédiaire
	if(tmp_vitesse_X < 0)
		tmp_acc_X = -1;
	if(tmp_vitesse_X > 0)
		tmp_acc_X = 1;
	if(tmp_vitesse_Y < 0)
		tmp_acc_Y = -1;
	if(tmp_vitesse_Y > 0)
		tmp_acc_Y = 1;

	//Si le pilote n'est pas dans le sable
	if(pilote->carte.matrice[pilote->coordonnee_map.x][pilote->coordonnee_map.y] == '#') {
		//Si la vitesse est dans la norme
		if(vecteur_vitesse(pilote->coordonnee_vitesse.x + tmp_acc_X, pilote->coordonnee_vitesse.y + tmp_acc_Y)<25) {

			//Si le pilote peut accélérer
			if(pilote->carte.matrice[pilote->coordonnee_map.x + pilote->coordonnee_vitesse.x + tmp_acc_X]
				[pilote->coordonnee_map.y + pilote->coordonnee_vitesse.y + tmp_acc_Y] == '#') {

				fprintf(inf, "[1]  ||  ");
				pilote->coordonnee_acc.x = tmp_acc_X;
				pilote->coordonnee_acc.y = tmp_acc_Y;
			}
			//Si le pilote avec sa vitesse, peut aller à la coordonnée donnée
			else if(pilote->carte.matrice[pilote->coordonnee_map.x + pilote->coordonnee_vitesse.x]
				[pilote->coordonnee_map.y + pilote->coordonnee_vitesse.y] == '#' && pilote->coordonnee_vitesse.x !=0
				&& pilote->coordonnee_vitesse.y != 0) {

				fprintf(inf, "[2]  ||  ");

				pilote->coordonnee_acc.x = 0;
				pilote->coordonnee_acc.y = 0;
			}
			else {

				fprintf(inf, "[3]  ||  ");
				if(tmp_acc_X == 0) {
					if(pilote->coordonnee_acc.y == 1) {
						pilote->coordonnee_acc.y = -1;
					}
					else {
						pilote->coordonnee_acc.y = 1;
					}
				}
				else if(tmp_acc_Y == 0) {
					if(pilote->coordonnee_acc.x == 1) {
						pilote->coordonnee_acc.x = -1;
					}
					else {
						pilote->coordonnee_acc.x = 1;
					}
				}else {
					pilote->coordonnee_acc.x = -tmp_acc_X;
					pilote->coordonnee_acc.y = -tmp_acc_Y;
				}
			}
		}
		else {
			pilote->coordonnee_acc.x = 0;
			pilote->coordonnee_acc.y = 0;
		}
		
	}
	else {

		//On regarde dans le carré autour du joueur s'il peut trouver un emplacement hors sable
		for(i=pilote->coordonnee_map.x -1; i<=pilote->coordonnee_map.x+1; i++) {
			for(j=pilote->coordonnee_map.y -1; j<=pilote->coordonnee_map.y+1; j++) {

				if(pilote->carte.matrice[i][j] == '#' && vecteur_vitesse(i-pilote->coordonnee_map.x,j-pilote->coordonnee_map.y)<=1) {

					pilote->coordonnee_acc.x = i-pilote->coordonnee_map.x;
					pilote->coordonnee_acc.y = j-pilote->coordonnee_map.y;

					//fprintf(inf, "coordonnees : %d %d\n", i-pilote->coordonnee_map.x,j-pilote->coordonnee_map.y);

					i=10000;
					j=10000;
				}
			}
		}
	}

	//Mise à jour du vecteur vitesse
	pilote->coordonnee_vitesse.x += pilote->coordonnee_acc.x;
	pilote->coordonnee_vitesse.y += pilote->coordonnee_acc.y;


}